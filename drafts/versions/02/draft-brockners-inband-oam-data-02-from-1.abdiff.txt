
INTRODUCTION, paragraph 1:
EXPLANATION: 

OLD:

 Network Working Group                                       F. Brockners
 Internet-Draft                                               S. Bhandari
 Intended status: Experimental                               C. Pignataro
|Expires: January 19, 2017                                          Cisco
                                                               H. Gredler
                                                             RtBrick Inc.
                                                                 J. Leddy
                                                                  Comcast
                                                                S. Youell
                                                                     JMPC
|                                                           July 18, 2016

NEW:

 Network Working Group                                       F. Brockners
 Internet-Draft                                               S. Bhandari
 Intended status: Experimental                               C. Pignataro
|Expires: May 3, 2017                                               Cisco
                                                               H. Gredler
                                                             RtBrick Inc.
                                                                 J. Leddy
                                                                  Comcast
                                                                S. Youell
                                                                     JMPC
|                                                              T. Mizrahi
|                                                                 Marvell
|                                                                D. Mozes
|                                              Mellanox Technologies Ltd.
|                                                             P. Lapukhov
|                                                                Facebook
|                                                                R. Chang
|                                                       Barefoot Networks
|                                                        October 30, 2016


------------------------------------------------------------------------


INTRODUCTION, paragraph 2:
EXPLANATION: 

OLD:

|                      Data Formats for In-band OAM
|                   draft-brockners-inband-oam-data-01

NEW:

|                      Data Formats for In-situ OAM
|                   draft-brockners-inband-oam-data-02


------------------------------------------------------------------------


INTRODUCTION, paragraph 4:
EXPLANATION: 

OLD:

|   In-band operation, administration and maintenance (OAM) records
    operational and telemetry information in the packet while the packet
    traverses a path between two points in the network.  This document
|   discusses the data types and data formats for in-band OAM data
|   records.  In-band OAM data records can be embedded into a variety of
    transports such as NSH, Segment Routing, VXLAN-GPE, native IPv6 (via
|   extension header), or IPv4.  In-band OAM is to complement current
    out-of-band OAM mechanisms based on ICMP or other types of probe
    packets.

NEW:

|   In-situ operation, administration and maintenance (OAM) records
    operational and telemetry information in the packet while the packet
    traverses a path between two points in the network.  This document
|   discusses the data types and data formats for in-situ OAM data
|   records.  In-situ OAM data records can be embedded into a variety of
    transports such as NSH, Segment Routing, VXLAN-GPE, native IPv6 (via
|   extension header), or IPv4.  In-situ OAM is to complement current
    out-of-band OAM mechanisms based on ICMP or other types of probe
    packets.


------------------------------------------------------------------------


INTRODUCTION, paragraph 9:
EXPLANATION: 

OLD:

|   This Internet-Draft will expire on January 19, 2017.

NEW:

|   This Internet-Draft will expire on May 3, 2017.


------------------------------------------------------------------------


Section 2., paragraph 0:
EXPLANATION: 

OLD:

    1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
    2.  Conventions . . . . . . . . . . . . . . . . . . . . . . . . .   3
|   3.  In-band OAM Data Types and Data Format  . . . . . . . . . . .   3
|     3.1.  In-band OAM Tracing Option  . . . . . . . . . . . . . . .   4
|       3.1.1.  In-band OAM Trace Type and Node Data Element  . . . .   7
|     3.2.  In-band OAM Proof of Transit Option . . . . . . . . . . .  10
|     3.3.  In-band OAM Edge-to-Edge Option . . . . . . . . . . . . .  11
|   4.  In-band OAM Data Export . . . . . . . . . . . . . . . . . . .  12
|   5.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  12
|   6.  Manageability Considerations  . . . . . . . . . . . . . . . .  12
|   7.  Security Considerations . . . . . . . . . . . . . . . . . . .  12
|   8.  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .  12
|   9.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  13
|     9.1.  Normative References  . . . . . . . . . . . . . . . . . .  13
|     9.2.  Informative References  . . . . . . . . . . . . . . . . .  13
|   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  13

NEW:

    1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
    2.  Conventions . . . . . . . . . . . . . . . . . . . . . . . . .   3
|   3.  In-situ OAM Data Types and Data Format  . . . . . . . . . . .   3
|     3.1.  In-situ OAM Tracing Options . . . . . . . . . . . . . . .   4
|       3.1.1.  Pre-allocated Trace Option  . . . . . . . . . . . . .   6
|       3.1.2.  Incremental Trace Option  . . . . . . . . . . . . . .   9
|       3.1.3.  In-situ OAM node data element format  . . . . . . . .  11
|       3.1.4.  Examples of In-situ OAM node data . . . . . . . . . .  14
|     3.2.  In-situ OAM Proof of Transit Option . . . . . . . . . . .  16
|     3.3.  In-situ OAM Edge-to-Edge Option . . . . . . . . . . . . .  18
|   4.  In-situ OAM Data Export . . . . . . . . . . . . . . . . . . .  18
|   5.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  19
|   6.  Manageability Considerations  . . . . . . . . . . . . . . . .  19
|   7.  Security Considerations . . . . . . . . . . . . . . . . . . .  19
|   8.  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .  19
|   9.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  19
|     9.1.  Normative References  . . . . . . . . . . . . . . . . . .  19
|     9.2.  Informative References  . . . . . . . . . . . . . . . . .  20
|   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  20


------------------------------------------------------------------------


Section 1., paragraph 1:
EXPLANATION: 

OLD:

|   This document defines data record types for "in-band" operation,
|   administration, and maintenance (OAM).  In-band OAM records OAM
    information within the packet while the packet traverses a particular
|   network domain.  The term "in-band" refers to the fact that the OAM
    data is added to the data packets rather than is being sent within
    packets specifically dedicated to OAM.  A discussion of the
|   motivation and requirements for in-band OAM can be found in
|   [draft-brockners-inband-oam-requirements].  In-band OAM is to
    complement "out-of-band" or "active" mechanisms such as ping or
    traceroute, or more recent active probing mechanisms as described in
|   [I-D.lapukhov-dataplane-probe].  In-band OAM mechanisms can be
    leveraged where current out-of-band mechanisms do not apply or do not
    offer the desired results, such as proving that a certain set of
    traffic takes a pre-defined path, SLA verification for the live data
    traffic, detailed statistics on traffic distribution paths in
    networks that distribute traffic across multiple paths, or scenarios
    where probe traffic is potentially handled differently from regular
    data traffic by the network devices.

NEW:

|   This document defines data record types for "in-situ" operation,
|   administration, and maintenance (OAM).  In-situ OAM records OAM
    information within the packet while the packet traverses a particular
|   network domain.  The term "in-situ" refers to the fact that the OAM
    data is added to the data packets rather than is being sent within
    packets specifically dedicated to OAM.  A discussion of the
|   motivation and requirements for in-situ OAM can be found in
|   [I-D.brockners-inband-oam-requirements].  In-situ OAM is to
    complement "out-of-band" or "active" mechanisms such as ping or
    traceroute, or more recent active probing mechanisms as described in
|   [I-D.lapukhov-dataplane-probe].  In-situ OAM mechanisms can be
    leveraged where current out-of-band mechanisms do not apply or do not
    offer the desired results, such as proving that a certain set of
    traffic takes a pre-defined path, SLA verification for the live data
    traffic, detailed statistics on traffic distribution paths in
    networks that distribute traffic across multiple paths, or scenarios
    where probe traffic is potentially handled differently from regular
    data traffic by the network devices.


------------------------------------------------------------------------


Section 1., paragraph 2:
EXPLANATION: 

OLD:

|   This document defines the data types and data formats for in-band OAM
|   data records.  The in-band OAM data records can be transported by a
    variety of transport protocols, including NSH, Segment Routing,
    VXLAN-GPE, IPv6, IPv4.  Encapsulation details for these different
    transport protocols are outside the scope of this document.

NEW:

|   This document defines the data types and data formats for in-situ OAM
|   data records.  The in-situ OAM data records can be transported by a
    variety of transport protocols, including NSH, Segment Routing,
    VXLAN-GPE, IPv6, IPv4.  Encapsulation details for these different
    transport protocols are outside the scope of this document.


------------------------------------------------------------------------


Section 2., paragraph 10:
EXPLANATION: 

OLD:

|3.  In-band OAM Data Types and Data Format

NEW:

|3.  In-situ OAM Data Types and Data Format


------------------------------------------------------------------------


Section 2., paragraph 11:
EXPLANATION: 

OLD:

|   This section defines in-band OAM data types and data formats of the
|   data records required for in-band OAM.  The different uses of in-band
|   OAM require the definition of different types of data.  The in-band
    OAM data format for the data being carried corresponds to the three
|   main categories of in-band OAM data defined in
|   [draft-brockners-inband-oam-requirements], which are edge-to-edge,
    per node, and for selected nodes only.

NEW:

|   This section defines in-situ OAM data types and data formats of the
|   data records required for in-situ OAM.  The different uses of in-situ
|   OAM require the definition of different types of data.  The in-situ
    OAM data format for the data being carried corresponds to the three
|   main categories of in-situ OAM data defined in
|   [I-D.brockners-inband-oam-requirements], which are : edge-to-edge,
    per node, and for selected nodes only.


------------------------------------------------------------------------


Section 2., paragraph 12:
EXPLANATION: 

OLD:

|   Transport options for in-band OAM data are found in
|   [draft-brockners-inband-oam-transport].  In-band OAM data is defined
|   as options in Type-Length-Value (TLV) format.  The TLV format for
|   each of the three different types of in-band OAM data is defined in
|   this document.

NEW:

|   Transport options for in-situ OAM data are found in
|   [I-D.brockners-inband-oam-transport].  In-situ OAM data is defined as
|   options in Type-Length-Value (TLV) format.  The TLV format for each
|   of the three different types of in-situ OAM data is defined in this
|   document.


------------------------------------------------------------------------


Section 2., paragraph 13:
EXPLANATION: 

OLD:

|   In-band OAM is expected to be deployed in a specific domain rather
    than on the overall Internet.  The part of the network which employs
|   in-band OAM is referred to as "in-band OAM-domain".  In-band OAM data
|   is added to a packet on entering the in-band OAM-domain and is
|   removed from the packet when exiting the domain.  Within the in-band
|   OAM-domain, the in-band OAM data may be updated by network nodes that
|   the packet traverses.  The device which adds in-band OAM data to the
|   packet is called the "in-band OAM encapsulating node", whereas the
|   device which removed the in-band OAM data is referred to as the "in-
|   band OAM decapsulating node".  Nodes within the domain which are
|   aware of in-band OAM data and read and/or write or process the in-
|   band OAM data are called "in-band OAM transit nodes".  Note that not
|   every node in an in-band OAM domain needs to be an in-band OAM
|   transit node.  For example, a Segment Routing deployment might
|   require the segment routing path to be verified.  In that case, only
|   the SR nodes would also be in-band OAM transit nodes rather than all
|   nodes.

NEW:

|   In-situ OAM is expected to be deployed in a specific domain rather
    than on the overall Internet.  The part of the network which employs
|   in situ OAM is referred to as the "in-situ OAM-domain".  In-situ OAM
|   data is added to a packet upon entering the in-situ OAM-domain and is
|   removed from the packet when exiting the domain.  Within the in-situ
|   OAM-domain, the in-situ OAM data may be updated by network nodes that
|   the packet traverses.  The device which adds in-situ OAM data
|   container to the packet to capture in-situ OAM data is called the
|   "in-situ OAM encapsulating node", whereas the device which removes
|   the in-situ OAM data container is referred to as the "in-situ OAM
|   decapsulating node".  Nodes within the domain which are aware of in-
|   situ OAM data and read and/or write or process the in-situ OAM data
|   are called "in-situ OAM transit nodes".  Note that not every node in
|   an in-situ OAM domain needs to be an in-situ OAM transit node.  For
|   example, a Segment Routing deployment might require the segment
|   routing path to be verified.  In that case, only the SR nodes would
|   also be in-situ OAM transit nodes rather than all nodes.


------------------------------------------------------------------------


Section 2., paragraph 14:
EXPLANATION: 

OLD:

|3.1.  In-band OAM Tracing Option

NEW:

|3.1.  In-situ OAM Tracing Options


------------------------------------------------------------------------


Section 2., paragraph 15:
EXPLANATION: 

OLD:

|   "In-band OAM tracing data" is expected to be collected at every hop
    that a packet traverses, i.e., in a typical deployment all nodes in
|   an in-band OAM-domain would participate in in-band OAM and thus be
|   in-band OAM transit nodes, in-band OAM encapsulating or in-band OAM
|   decapsulating nodes.  The network diameter of the in-band OAM domain
|   is assumed to be known.  For in-band OAM tracing, the in-band OAM
|   encapsulating node allocates an array which is to store operational
|   data retrieved from every node while the packet traverses the domain.
|   Every entry is to hold information for a particular in-band OAM
|   transit node that is traversed by a packet.  In-band OAM transit
|   nodes update the content of the array.  A pointer which is part of
|   the in-band OAM trace data points to the next empty slot in the
|   array, which is where the next in-band OAM transit node fills in its
|   data.  The in-band OAM decapsulating node removes the in-band OAM
|   data and process and/or export the metadata.  In-band OAM data uses
|   its own name-space for information such as node identifier or
|   interface identifier.  This allows for a domain-specific definition
|   and interpretation.  For example: In one case an interface-id could
|   point to a physical interface (e.g., to understand which physical
|   interface of an aggregated link is used when receiving or
|   transmitting a packet) whereas in another case it could refer to a
|   logical interface (e.g., in case of tunnels).

NEW:

|   "In-situ OAM tracing data" is expected to be collected at every node
    that a packet traverses, i.e., in a typical deployment all nodes in
|   an in-situ OAM-domain would participate in in-situ OAM and thus be
|   in-situ OAM transit nodes, in-situ OAM encapsulating or in-situ OAM
|   decapsulating nodes.  The maximum network diameter of the in-situ OAM
|   domain is assumed to be known.


------------------------------------------------------------------------


Section 2., paragraph 16:
EXPLANATION: 

OLD:

|   The following in-band OAM data is defined for in-band OAM tracing:

NEW:

|   To optimize hardware and software implementations tracing is defined
|   as two separate options.  Any deployment MAY choose to configure and
|   support one or both of the following options.  An implementation of
|   the transport protocol that carries these in-situ OAM data MAY choose
|   to support only one of the options.


------------------------------------------------------------------------


Section 2., paragraph 17:
EXPLANATION: 

OLD:

|   o  Identification of the in-band OAM node.  An in-band OAM node
       identifier can match to a device identifier or a particular
       control point or subsystem within a device.

NEW:

|   Pre-allocated Trace Option:  This trace option is defined as a
|      container of node-data elements with pre-allocated space for each
|      node to populate its information.  This option is useful for
|      software implementations where it is efficient to allocate the
|      space once and index into the array to populate the data during
|      transit.  The in-situ OAM encapsulating node allocates the option
|      header and sets the fields in the option header.  The in situ OAM
|      encapsulating node allocates an array which is to store
|      operational data retrieved from every node while the packet
|      traverses the domain.  In-situ OAM transit nodes update the
|      content of the array.  A pointer which is part of the in-situ OAM
|      trace data points to the next empty slot in the array, which is
|      where the next in-situ OAM transit node fills in its data.
|
|   Incremental Trace Option:  This trace options is defined as a
|      container of node-data elements where each node allocates and
|      pushes its node data immediately following the option header.  The
|      number of node-data recorded and maximum number of node data that
|      can be recorded are written into the option header.  This format
|      of trace recording is useful for some of the hardware
|      implementations as this eliminates the need for the transit
|      network elements to read the full array in the option and allows
|      for arbitrarily long packets as the MTU allows.  The in-situ OAM
|      encapsulating node allocates the option header.  The in-situ OAM
|      encapsulating node based on operational state and configuration
|      sets the fields in the header to control how large the node data
|      list can grow.  In-situ OAM transit nodes pushes its node data to
|      the node data list and increments the number of node data records
|      in the header.
|
|   Every node data entry is to hold information for a particular in situ
|   OAM transit node that is traversed by a packet.  The in-situ OAM
|   decapsulating node removes the in-situ OAM data and process and/or
|   export the metadata.  In-situ OAM data uses its own name-space for
|   information such as node identifier or interface identifier.  This
|   allows for a domain-specific definition and interpretation.  For
|   example: In one case an interface-id could point to a physical
|   interface (e.g., to understand which physical interface of an
|   aggregated link is used when receiving or transmitting a packet)
|   whereas in another case it could refer to a logical interface (e.g.,
|   in case of tunnels).
|
|   The following in-situ OAM data is defined for in-situ OAM tracing:
|
|   o  Identification of the in-situ OAM node.  An in-situ OAM node
       identifier can match to a device identifier or a particular
       control point or subsystem within a device.


------------------------------------------------------------------------


Section 2., paragraph 20:
EXPLANATION: 

OLD:

    o  Time of day when the packet was processed by the node.  Different
       definitions of processing time are feasible and expected, though
|      it is important that all devices of an in-band OAM domain follow
       the same definition.

NEW:

    o  Time of day when the packet was processed by the node.  Different
       definitions of processing time are feasible and expected, though
|      it is important that all devices of an in-situ OAM domain follow
       the same definition.


------------------------------------------------------------------------


Section 2., paragraph 21:
EXPLANATION: 

OLD:

    o  Generic data: Format-free information where syntax and semantic of
       the information is defined by the operator in a specific
|      deployment.  For a specific deployment, all in-band OAM nodes
       should interpret the generic data the same way.  Examples for
|      generic in-band OAM data include geo-location information
       (location of the node at the time the packet was processed),
       buffer queue fill level or cache fill level at the time the packet
       was processed, or even a battery charge level.

NEW:

    o  Generic data: Format-free information where syntax and semantic of
       the information is defined by the operator in a specific
|      deployment.  For a specific deployment, all in-situ OAM nodes
       should interpret the generic data the same way.  Examples for
|      generic in-situ OAM data include geo-location information
       (location of the node at the time the packet was processed),
       buffer queue fill level or cache fill level at the time the packet
       was processed, or even a battery charge level.


------------------------------------------------------------------------


Section 2., paragraph 22:
EXPLANATION: 

OLD:

|   o  A mechanism to detect whether in-band OAM trace data was added at
|      every hop or whether certain hops in the domain weren't in-band
       OAM transit nodes.

NEW:

|   o  A mechanism to detect whether in-situ OAM trace data was added at
|      every hop or whether certain hops in the domain weren't in-situ
       OAM transit nodes.


------------------------------------------------------------------------


Section 2., paragraph 24:
EXPLANATION: 

OLD:

|   In-band OAM Tracing Option:

NEW:

|3.1.1.  Pre-allocated Trace Option
|   In-situ OAM Pre-allocated Trace Option:


------------------------------------------------------------------------


Section 2., paragraph 25:
EXPLANATION: 

OLD:

     0                   1                   2                   3
     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   |  Option Type  |  Opt Data Len | OAM-trace-type| Elements-left |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<-+
    |                                                               |  |
    |                        Node data List [0]                     |  |
    |                                                               |  |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  D
    |                                                               |  a
    |                        Node data List [1]                     |  t
    |                                                               |  a
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    .                              .                                .  S
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  p
    |                                                               |  a
    |                        Node data List [n-1]                   |  c
    |                                                               |  e
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  |
    |                                                               |  |
    |                        Node data List [n]                     |  |
    |                                                               |  |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<-+

NEW:

     0                   1                   2                   3
     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   |  Option Type  |  Opt Data Len | Elements-left |    Reserved1  |
|   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   |         OAM-Trace-Type        |         Reserved2             |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<-+
    |                                                               |  |
    |                        Node data List [0]                     |  |
    |                                                               |  |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  D
    |                                                               |  a
    |                        Node data List [1]                     |  t
    |                                                               |  a
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    .                              .                                .  S
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  p
    |                                                               |  a
    |                        Node data List [n-1]                   |  c
    |                                                               |  e
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  |
    |                                                               |  |
    |                        Node data List [n]                     |  |
    |                                                               |  |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<-+


------------------------------------------------------------------------


Section 2., paragraph 28:
EXPLANATION: 

OLD:

|   OAM-trace-type:  8-bit identifier of a particular trace element
       variant.

NEW:

|   Elements-left:  8-bit unsigned integer.  A pointer that indicates the
|      next data recording point in the data space of the packet in
|      octets.  It is the index into the "Node data List" array shown
|      above.
|
|   Reserved1:  8-bit unused field in this document and MUST be set to
|      zero.
|
|   OAM-trace-type:  16-bit identifier of a particular trace element
       variant.


------------------------------------------------------------------------


Section 2., paragraph 29:
EXPLANATION: 

OLD:

|      The trace type value can be interpreted as a bit field.  The
|      following bit fields are defined in this document, with details on
|      each field described in the next section.  The order of packing
|      the trace data in each Node-data element follows the bit order for
|      setting each trace data element.  Only a valid combination of
|      these fields defined in this document are valid in-band OAM-trace-
|      types.

NEW:

|      The trace type value is a bit field.  The following bit fields are
|      defined in this document, with details on each field described in
|      the Section 3.1.3.  The order of packing the trace data in each
|      Node-data element follows the bit order for setting each trace
|      data element.


------------------------------------------------------------------------


Section 2., paragraph 30:
EXPLANATION: 

OLD:

|      Bit 0    When set indicates presence of node_id in the Node data.

NEW:

|      Bit 0    When set indicates presence of Hop_Lim and node_id in the
|               Node data.


------------------------------------------------------------------------


Section 2., paragraph 31:
EXPLANATION: 

OLD:

|      Bit 1    When set indicates presence of ingress_if_id in the Node
|               data.

NEW:

|      Bit 1    When set indicates presence of ingress_if_id and
|               egress_if_id in the Node data.


------------------------------------------------------------------------


Section 2., paragraph 32:
EXPLANATION: 

OLD:

|      Bit 2    When set indicates presence of egress_if_id in the Node
|               data.

NEW:

|      Bit 2    When set indicates presence of timestamp seconds in the
|               Node data


------------------------------------------------------------------------


Section 2., paragraph 33:
EXPLANATION: 

OLD:

|      Bit 3    When set indicates presence of timestamp in the Node
                data.

NEW:

|      Bit 3    When set indicates presence of timestamp nanoseconds in
|               the Node data.
|
|      Bit 4    When set indicates presence of transit delay in the Node
                data.


------------------------------------------------------------------------


Section 2., paragraph 34:
EXPLANATION: 

OLD:

|      Bit 4    When set indicates presence of app_data in the Node data.

NEW:

|      Bit 5    When set indicates presence of app_data in the Node data.


------------------------------------------------------------------------


Section 2., paragraph 35:
EXPLANATION: 

OLD:

|      Bit 5-7  Undefined in this document.

NEW:

|      Bit 6 - 14  Undefined in this document.


------------------------------------------------------------------------


Section 2., paragraph 36:
EXPLANATION: 

OLD:

|      Section 3.1.1 describes the format of a number of trace types.
|      Specifically, it exemplifies OAM-trace-types 0x00011111,
|      0x00000111, 0x00001001, 0x00010001, and 0x00011001.

NEW:

|      Bit 15   When set indicates wide data format for all the node data
|               elements that are present.  When unset indicates short
|               data format for all the node data elements that are
|               present.


------------------------------------------------------------------------


Section 2., paragraph 37:
EXPLANATION: 

OLD:

|   Elements-left:  8-bit unsigned integer.  A pointer that indicates the
|      next data recording point in the data space of the packet in
|      octets.  It is the index into the "Node data List" array shown
|      above.

NEW:

|      Section 3.1.4 describes the format of a number of trace types.
|
|   Reserved2:  16-bit unused field in this document and MUST be set to
|      zero.


------------------------------------------------------------------------


Section 2., paragraph 39:
EXPLANATION: 

OLD:

|3.1.1.  In-band OAM Trace Type and Node Data Element

NEW:

|3.1.2.  Incremental Trace Option


------------------------------------------------------------------------


Section 2., paragraph 40:
EXPLANATION: 

OLD:

|   An entry in the "Node data List" array can have different formats,
|   following the needs of the a deployment.  Some deployments might only
|   be interested in recording the node identifiers, whereas others might
|   be interested in recording node identifier and timestamp.  The
|   section defines different formats that an entry in "Node data List"
|   can take.

NEW:

|   In-situ OAM Incremental Trace Option:


------------------------------------------------------------------------


Section 2., paragraph 41:
EXPLANATION: 

OLD:

|   Node data has the following format:

NEW:

|    0                   1                   2                   3
|    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
|   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   |  Option Type  |  Opt Data Len | Maximum Length|    Flags      |
|   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   |         OAM Trace Type        |         Reserved              |
|   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   |                                                               |
|   |                        Node data List [0]                     |
|   |                                                               |
|   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   |                                                               |
|   |                        Node data List [1]                     |
|   |                                                               |
|   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   .                              .                                .
|   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   |                                                               |
|   |                        Node data List [n-1]                   |
|   |                                                               |
|   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   |                                                               |
|   |                        Node data List [n]                     |
|   |                                                               |
|   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|
|   Option Type:  8-bit identifier of the type of option.  Option number
|      is defined based on the encapsulation protocol.
|
|   Opt Data Len:  8-bit unsigned integer.  Length of the Option Data
|      field of this option, in octets.
|
|   Maximum Length:  8-bit unsigned integer.  This field specifies the
|      maximum length of the node data list in octets.  Given that the
|      sender knows the minimum path MTU, the sender can set the maximum
|      of node data bytes allowed before exceeding the MTU.  Thus, a
|      simple comparison between "Opt data Len" and "Max Length" allows
|      to decide whether or not data could be added.
|
|   Flags  8-bit field.  Following flags are defined:
|
|      1  "Overflow" (O-bit) (least significant bit).  This bit is set by
|         the network element if the number of records on the packet is
|         at the maximum limit as specified by the packet: i.e., the
|         packet is already "full" of telemetry information.  This is
|         useful for transit nodes to ignore further processing of the
|         option.  If inserting a new node data record would cause "Opt
|         Data Len" to exceed "Max Length", no record is added and the
|         overflow "O-bit" must be set to "1" in the header.
|
|   OAM-trace-type:  16-bit identifier of a particular trace element
|      variant.
|
|      The trace type value is a bit field.  The following bit fields are
|      defined in this document, with details on each field described in
|      the Section 3.1.3.  The order of packing the trace data in each
|      Node-data element follows the bit order for setting each trace
|      data element.
|
|      Bit 0    When set indicates presence of Hop_Lim and node_id in the
|               Node data.
|
|      Bit 1    When set indicates presence of ingress_if_id and
|               egress_if_id in the Node data.
|
|      Bit 2    When set indicates presence of timestamp seconds in the
|               Node data
|
|      Bit 3    When set indicates presence of timestamp nanoseconds in
|               the Node data.
|
|      Bit 4    When set indicates presence of transit delay in the Node
|               data.
|
|      Bit 5    When set indicates presence of app_data in the Node data.
|
|      Bit 6    When set indicates presence of variable length Opaque
|               State Snapshot field.
|
|      Bit 7-14 Undefined in this draft.
|
|      Bit 15   When set indicates wide data format for all the node data
|               elements that are present.  When unset indicates short
|               data format for all the node data elements that are
|               present.
|
|      Section 3.1.4 describes the format of a number of trace types.
|
|   Reserved:  2 bytes unused field in this document and MUST be set to
|      zero.
|
|   Node data List [n]:  Variable-length field.  The format of which is
|      determined by the OAM Type representing the n-th Node data in the
|      Node data List.  The Node data List is encoded starting from the
|      last Node data of the path.  The first element of the node data
|      list (Node data List [0]) contains the last node of the path while
|      the last node data of the Node data List (Node data List[n])
|      contains the first Node data of the path traced.
|
|3.1.3.  In-situ OAM node data element format
|
|   The in-situ OAM node data elements are defined in 2 formats - short
|   and wide that is selected by bit 15 in the OAM-trace-type field.  All
|   the data records MUST be 4-byte aligned in both the formats.
|
|   Data type and format for each of the data records in short format is
|   shown below:
|
|   Hop_Lim and node_id:  4-octet field defined as follows:


------------------------------------------------------------------------


Section 2., paragraph 42:
EXPLANATION: 

OLD:

     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|    |   Hop_Lim     |    <trace-data elements packed as indicated   ~
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|    ~             by in-band OAM-trace-type bits> .....             ~
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

NEW:

     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   |   Hop_Lim     |              node_id                          |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|
|      Hop_Lim:  1-octet unsigned integer.  It is set to the Hop Limit
|         value in the packet at the node that records this data.  Hop
|         Limit information is used to identify the location of the node
|         in the communication path.
|
|      node_id:  3-octet unsigned integer.  Node identifier field to
|         uniquely identify a node within in-situ OAM domain.  The
|         procedure to allocate, manage and map the node_ids is beyond
|         the scope of this document.
|
|   ingress_if_id and egress_if_id:  4-octet field defined as follows:
|
|    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
|   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   |     ingress_if_id             |         egress_if_id          |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


------------------------------------------------------------------------


Section 2., paragraph 43:
EXPLANATION: 

OLD:

|   0x00011111:  In-band OAM-trace-type is 0x00011111 then the format of
|      node data is:

NEW:

|      ingress_if_id:  2-octet unsigned integer.  Interface identifier to
|         record the ingress interface the packet was received on.
|
|      egress_if_id:  2-octet unsigned integer.  Interface identifier to
|         record the egress interface the packet is forwarded out of.
|
|   timestamp seconds:  4-octet unsigned integer.  Absolute timestamp in
|      seconds that specifies the time at which the packet was received
|      by the node.  The format of this field is identical to the most
|      significant 32 bits of 64 least significant bits of the
|      [IEEE1588v2].  This truncated format consists of a 32-bit seconds
|      field.  As defined in [IEEE1588v2], the timestamp specifies the
|      number of seconds elapsed since 1 January 1970 00:00:00 according
|      to the International Atomic Time (TAI).
|
|    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
|   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   |                       timestamp seconds                       |
|   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|
|   timestamp nanoseconds:  4-octet unsigned integer.  This timestamp
|      specifies time in nanoseconds relative to wall clock time at which
|      the packet was received by the node It is nanoseconds that are
|      recorded in 32 least significant bits of absolute time as per
|      [IEEE1588v2].  This fields allows for delay computation between
|      any two points in the network.
|
|    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
|   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   |                       timestamp nanoseconds                   |
|   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|
|   transit delay:  4-octet unsigned integer.  It is the time in
|      nanoseconds packet spent in transiting a node.  This can serve to
|      give an indication of queuing delay at the node.
|
|    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
|   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   |                      transit delay                            |
|   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|
|   app_data:  4-octet placeholder which can be used by the node to add
|      application specific data
|
|   Data type and format for each of the elements in wide format follows
|   when Most Significant Bit (MSB) i.e., bit 15 of OAM-Trace-Type is
|   set:
|
|   Hop_Lim and node_id:  8-octet field defined as follows:
|
|    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
|   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   |   Hop_Lim     |              node_id                          ~
|   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   ~                         node_id (contd)                       |
|   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|
|      Hop_Lim:  1-octet unsigned integer.  It is set to the Hop Limit
|         value in the packet at the node that records this data.  Hop
|         Limit information is used to identify the location of the node
|         in the communication path.
|
|      node_id:  7-octet unsigned integer.  Node identifier field to
|         uniquely identify a node within in-situ OAM domain.  The
|         procedure to allocate, manage and map the node_ids is beyond
|         the scope of this document.
|
|   ingress_if_id and egress_if_id:  8-octet field defined as follows:
|
|    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
|   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   |                       ingress_if_id                           |
|   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   |                       egress_if_id                            |
|   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|
|      ingress_if_id:  4-octet unsigned integer.  Interface identifier to
|         record the ingress interface the packet was received on.
|
|      egress_if_id:  4-octet unsigned integer.  Interface identifier to
|         record the egress interface the packet is forwarded out of.
|
|   app_data:  8-octet placeholder which can be used by the node to add
|      application specific data.
|
|   Opaque State Snapshot:  Variable length field.  It allows the network
|      element to store arbitrary state in the node data record, without
|      a pre-defined schema.  The schema needs to made known to the
|      analyzer by some out-of-band means.  The 24-bit "Schema Id" field
|      in the record is supposed to let the analyzer know which
|      particular schema to use, and it is expected to be configured on
|      the network element by the operator.  This ID is expected to be
|      configured on the device by the network operator.
|
|       0                   1                   2                   3
|       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
|      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      |   Length      |                     Schema ID                 |
|      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      |                                                               |
|      |                                                               |
|      |                        Opaque data                            |
|      ~                                                               ~
|      .                                                               .
|      .                                                               .
|      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|
|      Length:  1-octet unsigned integer.  It is the length of the Opaque
|         data field that follows Schema Id.  It MUST always be a
|         multiple of 4.
|
|      Schema ID:  3-octet unsigned integer identifying the schema of
|         Opaque data.
|
|      Opaque data:  Variable length field.  This field is interpreted as
|         specified by the schema identified by the Schema ID.
|
|      The fields - timestamp seconds, timestamp nanoseconds and transit
|      delay have the same format as defined in short format.
|
|3.1.4.  Examples of In-situ OAM node data
|
|   An entry in the "Node data List" array can have different formats,
|   following the needs of the deployment.  Some deployments might only
|   be interested in recording the node identifiers, whereas others might
|   be interested in recording node identifier and timestamp.  The
|   section defines different formats that an entry in "Node data List"
|   can take.
|
|   0x002B:  In-situ OAM-trace-type is 0x2B then the format of node data
|      is:


------------------------------------------------------------------------


Section 2., paragraph 44:
EXPLANATION: 

OLD:

         0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        |   Hop_Lim     |              node_id                          |
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        |     ingress_if_id             |         egress_if_id          |
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|       |                           timestamp                           |
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        |                            app_data                           |
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

NEW:

         0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        |   Hop_Lim     |              node_id                          |
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        |     ingress_if_id             |         egress_if_id          |
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|       |                  timestamp nanoseconds                        |
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        |                            app_data                           |
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


------------------------------------------------------------------------


Section 2., paragraph 45:
EXPLANATION: 

OLD:

|   0x00000111:  In-band OAM-trace-type is 0x00000111 then the format is:

NEW:

|   0x0003:  In-situ OAM-trace-type is 0x0003 then the format is:


------------------------------------------------------------------------


Section 2., paragraph 47:
EXPLANATION: 

OLD:

|   0x00001001:  In-band OAM-trace-type is 0x00001001 then the format is:

NEW:

|   0x0009:  In-situ OAM-trace-type is 0x0009 then the format is:


------------------------------------------------------------------------


Section 2., paragraph 48:
EXPLANATION: 

OLD:

         0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        |   Hop_Lim     |              node_id                          |
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|       |                           timestamp                           |
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

NEW:

         0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        |   Hop_Lim     |              node_id                          |
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|       |                   timestamp nanoseconds                       |
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


------------------------------------------------------------------------


Section 2., paragraph 49:
EXPLANATION: 

OLD:

|   0x00010001:  In-band OAM-trace-type is 0x00010001 then the format is:

NEW:

|   0x0021:  In-situ OAM-trace-type is 0x0021 then the format is:


------------------------------------------------------------------------


Section 2., paragraph 51:
EXPLANATION: 

OLD:

|   0x00011001:  In-band OAM-trace-type is 0x00011001 then the format is:

NEW:

|   0x0029:  In-situ OAM-trace-type is 0x0029 then the format is:


------------------------------------------------------------------------


Section 2., paragraph 52:
EXPLANATION: 

OLD:

         0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        |   Hop_Lim     |              node_id                          |
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|       |                           timestamp                           |
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        |                            app_data                           |
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

NEW:

         0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        |   Hop_Lim     |              node_id                          |
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|       |                    timestamp nanoseconds                      |
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        |                            app_data                           |
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


------------------------------------------------------------------------


Section 2., paragraph 53:
EXPLANATION: 

OLD:

|   Trace data elements in Node data are defined as follows:
|
|   Hop_Lim:  1 octet Hop limit that is set to the TTL value in the
|      packet at the node that records this data.
|
|   node_id:  Node identifier node_id is a 3 octet field to uniquely
|      identify a node within in-band OAM domain.  The procedure to
|      allocate, manage and map the node_ids is beyond the scope of this
|      document.
|
|   ingress_if_id:  2 octet interface identifier to record the ingress
|      interface the packet was received on.
|
|   egress_if_id:  2 octet interface identifier to record the egress
|      interface the packet is forwarded out of.
|
|   timestamp:  4 octet timestamp when packet has been processed by the
|      node.
|
|   app_data:  4 octet placeholder which can be used by the node to add
|      application specific data.

NEW:

|   0x104D:  In-situ OAM-trace-type is 0x104D then the format is:


------------------------------------------------------------------------


Section 2., paragraph 54:
EXPLANATION: 

OLD:

|   Hop Limit information is used to identify the location of the node in
|   the communication path.

NEW:

|        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
|       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|       |   Hop_Lim     |              node_id                          |
|       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|       |                         node_id(contd)                        |
|       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|       |                      timestamp seconds                        |
|       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|       |                    timestamp nanoseconds                      |
|       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|       |   Length      |                     Schema Id                 |
|       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|       |                                                               |
|       |                                                               |
|       |                        Opaque data                            |
|       ~                                                               ~
|       .                                                               .
|       .                                                               .
|       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


------------------------------------------------------------------------


Section 2., paragraph 55:
EXPLANATION: 

OLD:

|3.2.  In-band OAM Proof of Transit Option

NEW:

|3.2.  In-situ OAM Proof of Transit Option


------------------------------------------------------------------------


Section 2., paragraph 56:
EXPLANATION: 

OLD:

|   In-band OAM Proof of Transit data is to support the path or service
    function chain [RFC7665] verification use cases.  Proof-of-transit
|   uses methods like nested hashing or nested encryption of the in-band
    OAM data or mechanisms such as Shamir's Secret Sharing Schema (SSSS).
|   While details on how the in-band OAM data for the proof of transit
|   option is processed at in-band OAM encapsulating, decapsulating and
    transit nodes are outside the scope of the document, all of these
    approaches share the need to uniquely identify a packet as well as
    iteratively operate on a set of information that is handed from node
    to node.  Correspondingly, two pieces of information are added as in-
|   band OAM data to the packet:

NEW:

|   In-situ OAM Proof of Transit data is to support the path or service
    function chain [RFC7665] verification use cases.  Proof-of-transit
|   uses methods like nested hashing or nested encryption of the in-situ
    OAM data or mechanisms such as Shamir's Secret Sharing Schema (SSSS).
|   While details on how the in-situ OAM data for the proof of transit
|   option is processed at in-situ OAM encapsulating, decapsulating and
    transit nodes are outside the scope of the document, all of these
    approaches share the need to uniquely identify a packet as well as
    iteratively operate on a set of information that is handed from node
    to node.  Correspondingly, two pieces of information are added as in-
|   situ OAM data to the packet:


------------------------------------------------------------------------


Section 2., paragraph 59:
EXPLANATION: 

OLD:

|   In-band OAM Proof of Transit option:

NEW:

|   In-situ OAM Proof of Transit option:


------------------------------------------------------------------------


Section 2., paragraph 60:
EXPLANATION: 

OLD:

     0                   1                   2                   3
     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   |  Option Type  |  Opt Data Len |  POT type = 0 |F|  reserved   |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<-+
    |                           Random                              |  |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  P
    |                        Random(contd)                          |  O
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  T
    |                         Cumulative                            |  |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  |
    |                         Cumulative (contd)                    |  |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<-+

NEW:

     0                   1                   2                   3
     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   |  Option Type  |  Opt Data Len |  POT type = 0 |P|  reserved   |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<-+
    |                           Random                              |  |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  P
    |                        Random(contd)                          |  O
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  T
    |                         Cumulative                            |  |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  |
    |                         Cumulative (contd)                    |  |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<-+


------------------------------------------------------------------------


Section 2., paragraph 63:
EXPLANATION: 

OLD:

    POT Type:  8-bit identifier of a particular POT variant that dictates
|      the POT data that is included.

NEW:

    POT Type:  8-bit identifier of a particular POT variant that dictates
|      the POT data that is included.  This document defines POT Type 0:


------------------------------------------------------------------------


Section 2., paragraph 64:
EXPLANATION: 

OLD:

|      *  16 Octet field as described below
|   Flag (F):  1-bit.  Indicates which POT-profile is active. 0 means the
|      even POT-profile is active, 1 means the odd POT-profile is active.

NEW:

|      0: POT data is a 16 Octet field as described below.


------------------------------------------------------------------------


Section 2., paragraph 65:
EXPLANATION: 

OLD:

|   Reserved:  7-bit.  (Reserved Octet) Reserved octet for future use.

NEW:

|   Profile to use (P):  1-bit.  Indicates which POT-profile is used to
|      generate the Cumulative.  Any node participating in POT will have
|      a maximum of 2 profiles configured that drive the computation of
|      cumulative.  The two profiles are numbered 0, 1.  This bit conveys
|      whether profile 0 or profile 1 is used to compute the Cumulative.
|
|   Reserved:  7-bit.  Reserved for future use.


------------------------------------------------------------------------


Section 2., paragraph 69:
EXPLANATION: 

OLD:

|3.3.  In-band OAM Edge-to-Edge Option

NEW:

|3.3.  In-situ OAM Edge-to-Edge Option


------------------------------------------------------------------------


Section 2., paragraph 70:
EXPLANATION: 

OLD:

|   The in-band OAM Edge-to-Edge Option is to carry data which is to be
|   interpreted only by the in-band OAM encapsulating and in-band OAM
|   decapsulating node, but not by in-band OAM transit nodes.

NEW:

|   The in-situ OAM Edge-to-Edge Option is to carry data which is to be
|   interpreted only by the in-situ OAM encapsulating and in-situ OAM
|   decapsulating node, but not by in-situ OAM transit nodes.


------------------------------------------------------------------------


Section 2., paragraph 71:
EXPLANATION: 

OLD:

|   Currently only sequence numbers use the in-band OAM Edge-to-Edge
    option.  In order to detect packet loss, packet reordering, or packet
|   duplication in an in-band OAM-domain, sequence numbers can be added
    to packets of a particular tube (see
    [I-D.hildebrand-spud-prototype]).  Each tube leverages a dedicated
    namespace for its sequence numbers.

NEW:

|   Currently only sequence numbers use the in-situ OAM Edge-to-Edge
    option.  In order to detect packet loss, packet reordering, or packet
|   duplication in an in-situ OAM-domain, sequence numbers can be added
    to packets of a particular tube (see
    [I-D.hildebrand-spud-prototype]).  Each tube leverages a dedicated
    namespace for its sequence numbers.


------------------------------------------------------------------------


Section 2., paragraph 72:
EXPLANATION: 

OLD:

        0                   1                   2                   3
        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |  Option Type  |  Opt Data Len | OAM-E2E-Type  |    reserved   |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      |      E2E Option data format determined by iOAM-E2E-Type       |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

NEW:

        0                   1                   2                   3
        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |  Option Type  |  Opt Data Len | OAM-E2E-Type  |    reserved   |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      |      E2E Option data format determined by iOAM-E2E-Type       ~
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


------------------------------------------------------------------------


Section 2., paragraph 75:
EXPLANATION: 

OLD:

|   iOAM-E2E-Type:  8-bit identifier of a particular in-band OAM E2E
       variant.

NEW:

|   OAM-E2E-Type:  8-bit identifier of a particular in situ OAM E2E
       variant.


------------------------------------------------------------------------


Section 2., paragraph 78:
EXPLANATION: 

OLD:

|4.  In-band OAM Data Export

NEW:

|4.  In-situ OAM Data Export


------------------------------------------------------------------------


Section 2., paragraph 79:
EXPLANATION: 

OLD:

|   In-band OAM nodes collect information for packets traversing a domain
|   that supports in-band OAM.  The device at the domain edge (which
|   could also be an end-host) which receives a packet with in-band OAM
|   information chooses how to process the in-band OAM data collected
    within the packet.  This decapsulating node can simply discard the
    information collected, can process the information further, or export
    the information using e.g., IPFIX.

NEW:

|   In-situ OAM nodes collect information for packets traversing a domain
|   that supports in-situ OAM.  The device at the domain edge (which
|   could also be an end-host) which receives a packet with in-situ OAM
|   information chooses how to process the in-situ OAM data collected
    within the packet.  This decapsulating node can simply discard the
    information collected, can process the information further, or export
    the information using e.g., IPFIX.


------------------------------------------------------------------------


Section 2., paragraph 80:
EXPLANATION: 

OLD:

|   The discussion of in-band OAM data processing and export is left for
    a future version of this document.

NEW:

|   The discussion of in-situ OAM data processing and export is left for
    a future version of this document.


------------------------------------------------------------------------


Section 7., paragraph 1:
EXPLANATION: 

OLD:

    Security considerations will be addressed in a later version of this
|   document.  For a discussion of security requirements of in-band OAM,
|   please refer to [draft-brockners-inband-oam-requirements].

NEW:

    Security considerations will be addressed in a later version of this
|   document.  For a discussion of security requirements of in-situ OAM,
|   please refer to [I-D.brockners-inband-oam-requirements].


------------------------------------------------------------------------


Section 8., paragraph 1:
EXPLANATION: 

OLD:

    The authors would like to thank Eric Vyncke, Nalini Elkins, Srihari
    Raghavan, Ranganathan T S, Karthik Babu Harichandra Babu, Akshaya
|   Nadahalli, and Andrew Yourtchenko for the comments and advice.  This
|   document leverages and builds on top of several concepts described in
|   [draft-kitamura-ipv6-record-route].  The authors would like to
|   acknowledge the work done by the author Hiroshi Kitamura and people
|   involved in writing it.

NEW:

    The authors would like to thank Eric Vyncke, Nalini Elkins, Srihari
    Raghavan, Ranganathan T S, Karthik Babu Harichandra Babu, Akshaya
|   Nadahalli, LJ Wobker, Erik Nordmark, and Andrew Yourtchenko for the
|   comments and advice.  This document leverages and builds on top of
|   several concepts described in [I-D.kitamura-ipv6-record-route].  The
|   authors would like to acknowledge the work done by the author Hiroshi
|   Kitamura and people involved in writing it.


------------------------------------------------------------------------


Section 9.1., paragraph 1:
EXPLANATION: 

OLD:

|   [draft-brockners-inband-oam-requirements]
|              Brockners, F., Bhandari, S., and S. Dara, "Requirements
|              for in-band OAM", July 2016.
|
|9.2.  Informative References
|
|   [draft-brockners-inband-oam-transport]
|              Brockners, F., Bhandari, S., Pignataro, C., and H.
|              Gredler, "Encapsulations for in-band OAM", July 2016.

NEW:

|   [I-D.brockners-inband-oam-requirements]
|              Brockners, F., Bhandari, S., Dara, S., Pignataro, C.,
|              Gredler, H., Leddy, J., and S. Youell, "Requirements for
|              In-band OAM", draft-brockners-inband-oam-requirements-01
|              (work in progress), July 2016.


------------------------------------------------------------------------


Section 9.1., paragraph 2:
EXPLANATION: 

OLD:

|   [draft-brockners-proof-of-transit]
|              Brockners, F., Bhandari, S., and S. Dara, "Proof of
|              transit", July 2016.

NEW:

|   [IEEE1588v2]
|              Institute of Electrical and Electronics Engineers,
|              "1588-2008 - IEEE Standard for a Precision Clock
|              Synchronization Protocol for Networked Measurement and
|              Control Systems",  IEEE Std 1588-2008, 2008,
|              <http://standards.ieee.org/findstds/
|              standard/1588-2008.html>.


------------------------------------------------------------------------


Section 9.1., paragraph 3:
EXPLANATION: 

OLD:

|   [draft-kitamura-ipv6-record-route]
|              Kitamura, H., "Record Route for IPv6 (PR6),Hop-by-Hop
|              Option Extension", November 2000.

NEW:

|9.2.  Informative References


------------------------------------------------------------------------


Section 9.1., paragraph 4:
EXPLANATION: 

OLD:

|   [FD.io]    "Fast Data Project: FD.io", <https://fd.io/>.

NEW:

|   [I-D.brockners-inband-oam-transport]
|              Brockners, F., Bhandari, S., Pignataro, C., Gredler, H.,
|              Leddy, J., and S. Youell, "Encapsulations for In-band OAM
|              Data", draft-brockners-inband-oam-transport-01 (work in
|              progress), July 2016.


------------------------------------------------------------------------


Section 9.1., paragraph 6:
EXPLANATION: 

OLD:

    [I-D.lapukhov-dataplane-probe]
               Lapukhov, P. and r. remy@barefootnetworks.com, "Data-plane
               probe for in-band telemetry collection", draft-lapukhov-
               dataplane-probe-01 (work in progress), June 2016.

NEW:

|   [I-D.kitamura-ipv6-record-route]
|              Kitamura, H., "Record Route for IPv6 (PR6) Hop-by-Hop
|              Option Extension", draft-kitamura-ipv6-record-route-00
|              (work in progress), November 2000.
|
    [I-D.lapukhov-dataplane-probe]
               Lapukhov, P. and r. remy@barefootnetworks.com, "Data-plane
               probe for in-band telemetry collection", draft-lapukhov-
               dataplane-probe-01 (work in progress), June 2016.


------------------------------------------------------------------------


Section 9.1., paragraph 7:
EXPLANATION: 

OLD:

|   [P4]       Kim, , "P4: In-band Network Telemetry (INT)", September
|              2015.
|
    [RFC7665]  Halpern, J., Ed. and C. Pignataro, Ed., "Service Function
               Chaining (SFC) Architecture", RFC 7665,
               DOI 10.17487/RFC7665, October 2015,
               <http://www.rfc-editor.org/info/rfc7665>.

NEW:

    [RFC7665]  Halpern, J., Ed. and C. Pignataro, Ed., "Service Function
               Chaining (SFC) Architecture", RFC 7665,
               DOI 10.17487/RFC7665, October 2015,
               <http://www.rfc-editor.org/info/rfc7665>.


------------------------------------------------------------------------


Section 9.1., paragraph 8:
EXPLANATION: 

OLD:

 Authors' Addresses
    Frank Brockners
    Cisco Systems, Inc.
    Hansaallee 249, 3rd Floor
    DUESSELDORF, NORDRHEIN-WESTFALEN  40549
    Germany

NEW:

 Authors' Addresses
|
    Frank Brockners
    Cisco Systems, Inc.
    Hansaallee 249, 3rd Floor
    DUESSELDORF, NORDRHEIN-WESTFALEN  40549
    Germany


------------------------------------------------------------------------


Section 9.1., paragraph 9:
EXPLANATION: 

OLD:

    Email: fbrockne@cisco.com
|
    Shwetha Bhandari
    Cisco Systems, Inc.
    Cessna Business Park, Sarjapura Marathalli Outer Ring Road
    Bangalore, KARNATAKA 560 087
    India

NEW:

    Email: fbrockne@cisco.com
    Shwetha Bhandari
    Cisco Systems, Inc.
    Cessna Business Park, Sarjapura Marathalli Outer Ring Road
    Bangalore, KARNATAKA 560 087
    India


------------------------------------------------------------------------


Section 25, paragraph 1:
EXPLANATION: 

OLD:

    Email: stephen.youell@jpmorgan.com

NEW:

    Email: stephen.youell@jpmorgan.com
|
|   Tal
|   Marvell
|   6 Hamada St.
|   Yokneam  20692
|   Israel
|
|   Email: talmi@marvell.com
|   David
|   Mellanox Technologies Ltd.
|
|   Email: davidm@mellanox.com
|
|   Petr
|   Facebook
|   1 Hacker Way
|   Menlo Park, CA  94025
|   US
|
|   Email: petr@fb.com
|
|   Remy
|   Barefoot Networks
|   2185 Park Boulevard
|   Palo Alto, CA  94306
|   US

