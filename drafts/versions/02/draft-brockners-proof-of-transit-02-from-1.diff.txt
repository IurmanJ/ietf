--- 1/draft-brockners-proof-of-transit-01.txt	2016-08-16 14:24:00.000000000 -0400
+++ 2/draft-brockners-proof-of-transit-02.txt	2016-08-16 14:24:00.000000000 -0400
@@ -4,21 +4,21 @@
 Intended status: Experimental                                    S. Dara
 Expires: January 19, 2017                                   C. Pignataro
                                                                    Cisco
                                                                 J. Leddy
                                                                  Comcast
                                                                S. Youell
                                                                     JMPC
                                                            July 18, 2016
 
                             Proof of Transit
-                  draft-brockners-proof-of-transit-01
+                  draft-brockners-proof-of-transit-02
 
 Abstract
 
    Several technologies such as traffic engineering, service function
    chaining, or policy based routing, are used to steer traffic through
    a specific, user-defined path.  This document defines mechanisms to
    securely prove that traffic transited the defined path.  The
    mechanisms allow to securely verify whether all packets traversed all
    those nodes of a given path that they are supposed to visit.
 
@@ -77,33 +77,35 @@
          3.3.2.3.  Verification  . . . . . . . . . . . . . . . . . .  10
      3.4.  Operational Aspects . . . . . . . . . . . . . . . . . . .  10
    4.  Sizing the Data for Proof of Transit  . . . . . . . . . . . .  11
    5.  Node Configuration  . . . . . . . . . . . . . . . . . . . . .  12
      5.1.  Procedure . . . . . . . . . . . . . . . . . . . . . . . .  12
      5.2.  YANG Model  . . . . . . . . . . . . . . . . . . . . . . .  12
    6.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  15
    7.  Manageability Considerations  . . . . . . . . . . . . . . . .  15
    8.  Security Considerations . . . . . . . . . . . . . . . . . . .  16
      8.1.  Proof of Transit  . . . . . . . . . . . . . . . . . . . .  16
-     8.2.  Anti Replay . . . . . . . . . . . . . . . . . . . . . . .  16
-     8.3.  Anti Tampering  . . . . . . . . . . . . . . . . . . . . .  16
-     8.4.  Recycling . . . . . . . . . . . . . . . . . . . . . . . .  17
-     8.5.  Redundant Nodes and Failover  . . . . . . . . . . . . . .  17
-     8.6.  Controller Operation  . . . . . . . . . . . . . . . . . .  17
-     8.7.  Verification Scope  . . . . . . . . . . . . . . . . . . .  17
-       8.7.1.  Node Ordering . . . . . . . . . . . . . . . . . . . .  18
-       8.7.2.  Stealth Nodes . . . . . . . . . . . . . . . . . . . .  18
-   9.  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .  18
-   10. References  . . . . . . . . . . . . . . . . . . . . . . . . .  18
-     10.1.  Normative References . . . . . . . . . . . . . . . . . .  18
-     10.2.  Informative References . . . . . . . . . . . . . . . . .  18
-   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  19
+     8.2.  Cryptanalysis . . . . . . . . . . . . . . . . . . . . . .  16
+     8.3.  Anti Replay . . . . . . . . . . . . . . . . . . . . . . .  17
+     8.4.  Anti Preplay  . . . . . . . . . . . . . . . . . . . . . .  17
+     8.5.  Anti Tampering  . . . . . . . . . . . . . . . . . . . . .  17
+     8.6.  Recycling . . . . . . . . . . . . . . . . . . . . . . . .  18
+     8.7.  Redundant Nodes and Failover  . . . . . . . . . . . . . .  18
+     8.8.  Controller Operation  . . . . . . . . . . . . . . . . . .  18
+     8.9.  Verification Scope  . . . . . . . . . . . . . . . . . . .  18
+       8.9.1.  Node Ordering . . . . . . . . . . . . . . . . . . . .  19
+       8.9.2.  Stealth Nodes . . . . . . . . . . . . . . . . . . . .  19
+   9.  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .  19
+   10. References  . . . . . . . . . . . . . . . . . . . . . . . . .  19
+     10.1.  Normative References . . . . . . . . . . . . . . . . . .  19
+     10.2.  Informative References . . . . . . . . . . . . . . . . .  19
+   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  20
 
 1.  Introduction
 
    Several deployments use traffic engineering, policy routing, segment
    routing or Service Function Chaining (SFC) [RFC7665] to steer packets
    through a specific set of nodes.  In certain cases regulatory
    obligations or a compliance policy require operators to prove that
    all packets that are supposed to follow a specific path are indeed
    being forwarded across and exact set of pre-determined nodes.
 
@@ -378,21 +380,23 @@
    As observed previously, the vanilla algorithm that involves a single
    secret polynomial is not secure.  We enhance the solution with usage
    of a random second polynomial chosen per packet.
 
 3.3.2.1.  Random Polynomial
 
    Let the second polynomial POLY-2 be (RND + 7x + 10 x^2).  RND is a
    random number and is generated for each packet.  Note that POLY-2 is
    public and need not be kept secret.  The nodes can be pre-configured
    with the non-constant coefficients (for example, 7 and 10 in this
-   case could be configured through the Controller on each node).
+   case could be configured through the Controller on each node).  So
+   precisely only RND value changes per packet and is public and the
+   rest of the non-constant co-efficients of POLY-2 kept secret.
 
 3.3.2.2.  Reconstruction
 
    Recall that each node is preconfigured with their respective
    Share(POLY-1).  Each node calculates its respective Share(POLY-2)
    using the RND value retrieved from the packet.  The CML
    reconstruction is enhanced as below.  At every node, CML is updated
    as
 
    CML = CML+(((Share(POLY-1)+ Share(POLY-2)) * LPC) mod Prime.
@@ -450,28 +455,31 @@
    the scope of this document.  Techniques such as those described in
    [I-D.ietf-anima-autonomic-control-plane] might be applied.
 
    To optimize the overall data amount of exchanged and the processing
    at the nodes the following optimizations are performed:
 
    1.  The points (x,y) for each of the nodes on the public and private
        polynomials are picked such that the x component of the points
        match.  This lends to the LPC values which are used to calculate
        the cumulative value CML to be constant.  Note that the LPC are
-       only depending on the x components.  The can be computed at the
+       only depending on the x components.  They can be computed at the
        controller and communicated to the nodes.  Otherwise, one would
        need to distributed the x components to all the nodes.
 
    2.  A pre-evaluated portion of the public polynomial for each of the
        nodes is calculated and added to the POT-profile.  Without this
        all the coefficients of the public polynomial had to be added to
-       the POT profile and each node had to evaluate them.
+       the POT profile and each node had to evaluate them.  As stated
+       before, the public portion is only the constant co-efficent RND
+       value, the pre-evaluated portion for each nodes should be kept
+       secret as well.
 
    3.  To provide flexibility on the size of the cumulative and random
        numbers carried in the POT data a field to indicate this is
        shared and interpreted at the nodes.
 
 4.  Sizing the Data for Proof of Transit
 
    Proof of transit requires transport of two data records in every
    packet that should be verified:
 
@@ -716,167 +724,187 @@
    an attacker even with unlimited computing power.  As long as the
    below conditions are met it is impossible for an attacker to bypass
    one or multiple nodes without getting caught.
 
    o  If there are k+1 nodes in the path, the polynomials (POLY-1, POLY-
       2) should be of degree k.  Also k+1 points of POLY-1 are chosen
       and assigned to each node respectively.  The verifier can re-
       construct the k degree polynomial (POLY-3) only when all the
       points are correctly retrieved.
 
-   o  The Shares of the SECRET (i.e., points on POLY-1 ) are kept secret
-      by individual nodes.
+   o  Precisely three values are kept secret by individual nodes.  Share
+      of SECRET (i.e. points on POLY-1), Share of POLY-2, LPC, P.  Note
+      that only constant coefficient, RND, of POLY-2 is public.  x
+      values and non-constant coefficient of POLY-2 are secret
 
    An attacker bypassing a few nodes will miss adding a respective point
    on POLY-1 to corresponding point on POLY-2 , thus the verifier cannot
    construct POLY-3 for cross verification.
 
-8.2.  Anti Replay
+   Also it is highly recommended that different polynomials should be
+   used as POLY-1 across different paths, traffic profiles or service
+   chains.
 
-   A passive attacker observing CML values across nodes (i.e., as the
-   packets entering and leaving), cannot perform differential analysis
-   to construct the points on POLY-1 as the operations are done modulo
-   prime.  The solution approach is flexible, one could use different
-   points on POLY-1 or different polynomials as POLY-1 across different
-   paths, traffic profiles or service chains.
+8.2.  Cryptanalysis
 
-   Doing differential analysis across packets could be mitigated with
-   POLY-2 being be random.  Further an attacker could reuse a set of RND
-   and all the intermediate CML values to bypass certain nodes in later
-   packets.  Such attacks could be avoided by carefully choosing POLY-2
-   as a timestamp concatenated with a random string.  The verifier could
-   use the timestamp to mitigate reuse within a time window.
+   A passive attacker could try to harvest the POT data (i.e CML, RND
+   values) in order to determine the configured secrets.  Subsequently
+   two types of differential analysis for guessing the secrets could be
+   done.
 
-8.3.  Anti Tampering
+   o  Inter-Node: A passive attacker observing CML values across nodes
+      (i.e., as the packets entering and leaving), cannot perform
+      differential analysis to construct the points on POLY-1.  This is
+      because at each point there are four unknowns (i.e.  Share(POLY-
+      1), Share(Poly-2) LPC and prime number P) and three known values
+      (i.e.  RND, CML-before, CML-after).
+
+   o  Inter-Packets: A passive attacker could observe CML values across
+      packets (i.e., values of PKT-1 and subsequent PKT-2), in order to
+      predict the secrets.  Differential analysis across packets could
+      be mitigated using a good PRNG for generating RND.  Note that if
+      constant coefficient is a sequence number than CML values become
+      quite predictable and the scheme would be broken
+
+8.3.  Anti Replay
+
+   A passive attacker could reuse a set of older RND and the
+   intermediate CML values to bypass certain nodes in later packets.
+   Such attacks could be avoided by carefully choosing POLY-2 as a
+   (SEQ_NO + RND).  For example if 64 bits are being used for POLY-2
+   then first 16 bits could be a sequence number SEQ_NO and next 48 bits
+   could be a random number.
+
+   Subsequently, the verifier could use the SEQ_NO bits to run classic
+   anti-replay techniques like sliding window used in IPSEC.  The
+   verifier could buffer upto 2^16 packets as a sliding window.  Packets
+   arriving with a higher SEQ_NO than current buffer could be flagged
+   legitimate.  Packets arriving with a lower SEQ_NO than current buffer
+   could be flagged as suspicious.
+
+   For all practical purposes in the rest of the document by RND we mean
+   SEQ_NO + RND to keep it simple
+
+8.4.  Anti Preplay
+
+   An active attacker could try to perform a man-in-the-middle (MITM)
+   attack by extracting the POT of PKT-1 and using it in PKT-2.
+   Subsequently attacker drops the PKT-1 in order to avoid duplicate POT
+   values reaching the verifier.  Although such attacks are highly
+   difficult to launch, below recommendations are provided
+
+   o  Any such MITM attack would add delay in the packets arrival at
+      verifier.  Carefully chosing the SEQ_NO could thwart such attacks,
+      as such crafted packets would be out of sliding window due to
+      delay.
+
+   o  Also integrity checks performed at higher level protocols using
+      POT schemes could identify that the packets were tampered
+
+8.5.  Anti Tampering
 
    An active attacker could not insert any arbitrary value for CML.
    This would subsequently fail the reconstruction of the POLY-3.  Also
    an attacker could not update the CML with a previously observed
    value.  This could subsequently be detected by using timestamps
    within the RND value as discussed above.
 
-8.4.  Recycling
+8.6.  Recycling
 
    The solution approach is flexible for recycling long term secrets
    like POLY-1.  All the nodes could be periodically updated with shares
    of new SECRET as best practice.  The table above could be consulted
    for refresh cycles (see Section 4).
 
-8.5.  Redundant Nodes and Failover
+8.7.  Redundant Nodes and Failover
 
    A "node" or "service" in terms of POT can be implemented by one or
    multiple physical entities.  In case of multiple physical entities
    (e.g., for load-balancing, or business continuity situations -
    consider for example a set of firewalls), all physical entities which
    are implementing the same POT node are given that same share of the
    secret.  This makes multiple physical entities represent the same POT
    node from an algorithm perspective.
 
-8.6.  Controller Operation
+8.8.  Controller Operation
 
    The Controller needs to be secured given that it creates and holds
    the secrets, as need to be the nodes.  The communication between
    Controller and the nodes also needs to be secured.  As secure
    communication protocol such as for example Netconf over SSH should be
    chosen for Controller to node communication.
 
    The Controller only interacts with the nodes during the initial
    configuration and thereafter at regular intervals at which the
    operator chooses to switch to a new set of secrets.  In case 64 bits
    are used for the data-records "CML" and "RND" which are carried
    within the data packet, the regular intervals are expected to be
    quite long (e.g., at 100 Gbps, a profile would only be used up after
    3100 years) - see Section 4 above, thus even a "headless" operation
    without a Controller can be considered feasible.  In such a case, the
    Controller would only be used for the initial configuration of the
    POT-profiles.
 
-8.7.  Verification Scope
+8.9.  Verification Scope
 
    The POT solution defined in this document verifies that a data-packet
    traversed or transited a specific set of nodes.  From an algorithm
    perspective, a "node" is an abstract entity.  It could be represented
    by one or multiple physical or virtual network devices, or is could
    be a component within a networking device or system.  The latter
    would be the case if a forwarding path within a device would need to
    be securely verified.
 
-8.7.1.  Node Ordering
+8.9.1.  Node Ordering
 
    POT using Shamir's secret sharing scheme as discussed in this
    document provides for a means to verify that a set of nodes has been
    visited by a data packet.  It does not verify the order in which the
    data packet visited the nodes.  In case the order in which a data
    packet traversed a particular set of nodes needs to be verified as
    well, alternate schemes that e.g., rely on nested encryption could to
    be considered.
 
-8.7.2.  Stealth Nodes
+8.9.2.  Stealth Nodes
 
    The POT approach discussed in this document is to prove that a data
    packet traversed a specific set of "nodes".  This set could be all
    nodes within a path, but could also be a subset of nodes in a path.
    Consequently, the POT approach isn't suited to detect whether
    "stealth" nodes which do not participate in proof-of-transit have
    been inserted into a path.
 
 9.  Acknowledgements
 
    The authors would like to thank Eric Vyncke, Nalini Elkins, Srihari
    Raghavan, Ranganathan T S, Karthik Babu Harichandra Babu, Akshaya
    Nadahalli, and Andrew Yourtchenko for the comments and advice.
 
 10.  References
 
 10.1.  Normative References
 
-   [draft-kitamura-ipv6-record-route]
-              Kitamura, H., "Record Route for IPv6 (PR6),Hop-by-Hop
-              Option Extension", November 2000.
-
    [RFC7665]  Halpern, J., Ed. and C. Pignataro, Ed., "Service Function
               Chaining (SFC) Architecture", RFC 7665,
               DOI 10.17487/RFC7665, October 2015,
               <http://www.rfc-editor.org/info/rfc7665>.
 
    [SSS]      "Shamir's Secret Sharing", <https://en.wikipedia.org/wiki/
               Shamir%27s_Secret_Sharing>.
 
 10.2.  Informative References
 
-   [draft-brockners-inband-oam-data]
-              Brockners, F. and S. Bhandari, "Data Formats for in-band
-              OAM", July 2016.
-
-   [draft-brockners-inband-oam-requirements]
-              Brockners, F., Bhandari, S., and S. Dara, "Requirements
-              for in-band OAM", July 2016.
-
-   [draft-brockners-inband-oam-transport]
-              Brockners, F. and S. Bhandari, "Encapsulations for in-band
-              OAM", July 2016.
-
-   [FD.io]    "Fast Data Project: FD.io", <https://fd.io/>.
-
-   [I-D.hildebrand-spud-prototype]
-              Hildebrand, J. and B. Trammell, "Substrate Protocol for
-              User Datagrams (SPUD) Prototype", draft-hildebrand-spud-
-              prototype-03 (work in progress), March 2015.
-
    [I-D.ietf-anima-autonomic-control-plane]
               Behringer, M., Eckert, T., and S. Bjarnason, "An Autonomic
               Control Plane", draft-ietf-anima-autonomic-control-
               plane-03 (work in progress), July 2016.
 
-   [P4]       Kim, , "P4: In-band Network Telemetry (INT)", September
-              2015.
-
 Authors' Addresses
 
    Frank Brockners
    Cisco Systems, Inc.
    Hansaallee 249, 3rd Floor
    DUESSELDORF, NORDRHEIN-WESTFALEN  40549
    Germany
 
    Email: fbrockne@cisco.com
 
